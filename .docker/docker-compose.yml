version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../backend/api-gateway
      dockerfile: Dockerfile
    image: fleet-management/api-gateway:latest
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENABLE_GLOBAL_RATE_LIMIT=true
      - INSTANCE_ID=api-gateway-1
      - REDIS_CONNECT_RETRIES=10
      - REDIS_CONNECT_RETRY_DELAY=2000
      - VEHICLE_SERVICE_URL=http://vehicle-service:3000
      - TRACKING_SERVICE_URL=http://tracking-service:3001
      - MAINTENANCE_SERVICE_URL=http://maintenance-service:3002
      - ANALYTICS_SERVICE_URL=http://analytics-service:3003
      - SIMULATOR_SERVICE_URL=http://simulator-service:3004
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fleet-network
    command: npm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Simulator Service
  simulator-service:
    build:
      context: ../backend/simulator-service
      dockerfile: Dockerfile
    image: fleet-management/simulator-service:latest
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://admin:password@mongodb:27017/fleet-simulator?authSource=admin
      - KAFKA_BROKERS=kafka:29092
      - PORT=3004
      - LOG_LEVEL=info
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - fleet-network
    command: npm run start
    volumes:
    - simulator-logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Vehicle Service
  vehicle-service:
    build:
      context: ../backend/vehicle-service
      dockerfile: Dockerfile
    image: fleet-management/vehicle-service:latest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/fleet-vehicles?authSource=admin
      - KAFKA_BROKERS=kafka:29092
      - PORT=3000
      - LOG_LEVEL=info
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - fleet-network
    command: npm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Tracking Service
  tracking-service:
    build:
      context: ../backend/tracking-service
      dockerfile: Dockerfile
    image: fleet-management/tracking-service:latest
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/fleet-tracking?authSource=admin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:29092
      - PORT=3001
      - LOG_LEVEL=info
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - fleet-network
    command: npm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Maintenance Service
  maintenance-service:
    build:
      context: ../backend/maintenance-service
      dockerfile: Dockerfile
    image: fleet-management/maintenance-service:latest
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/fleet-maintenance?authSource=admin
      - KAFKA_BROKERS=kafka:29092
      - PORT=3002
      - LOG_LEVEL=info
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - fleet-network
    command: npm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Analytics Service
  analytics-service:
    build:
      context: ../backend/analytics-service
      dockerfile: Dockerfile
    image: fleet-management/analytics-service:latest
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/fleet-analytics?authSource=admin
      - KAFKA_BROKERS=kafka:29092
      - VEHICLE_SERVICE_URL=http://api-gateway:8080/api
      - PORT=3003
      - LOG_LEVEL=info
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      vehicle-service:
        condition: service_healthy
    networks:
      - fleet-network
    command: npm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
      
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb-data:/data/db
    networks:
      - fleet-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - fleet-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 300M

  # Kafka and Zookeeper for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - fleet-network
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - fleet-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka UI for easier management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - fleet-network

  # Mongo Express for MongoDB management
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - fleet-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:8081/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Define volumes
volumes:
  mongodb-data:
  redis-data:
  simulator-logs:
# Define networks
networks:
  fleet-network:
    driver: bridge 